n <- 1:4
r <- lapply(n, rnorm)
r
x <-list(rnorm(100), runif(100), rpois(100,1))
x
sapply(x, quantile, probs = c(0.2, 0.8))
m <-matrix(1:50, 10, 5)
m
a <- apply(m,2,max)
a
a <- apply(m,1,max)
a
x <- rnorm(2 * 2 * 10)
x
a <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
a
x <- matrix(rnorm(200), 50, 4)
apply(x, 3, mean)
x <- frame( d <- read.csv(  text=' "col1", "col2"
"row1",1,2
"row2",3,4'
, row.names=1  )
)
d <- read.csv(textConnection("
a, b
1, cow
2, dog
3, cat"), header = TRUE)
d
mtcars
rows(mtcars)
row(mtcars)
mtcars
mtcars.frame
summary(mtcars)
mtcars
tapply(mtcars, vs, mean)
z <- tapply(mtcars, mtcars$vs, mean)
z <- tapply(mtcars$hp, mtcars$vs, mean)
z
row(mtcars)
f <- gl(8, 4)
f
f <- gl(4, 8)
f
a <- split(mtcars, f)
a
q()
curve(x*x -2x +1)
curve(x*x -2*x +1)
?curve
curve(x*x -2*x +1, xlim=c(-2, 2))
curve(x*x -2*x +1, xlim=c(-2, 4))
library(ggplot2)
facets <- c("1", "2", "3", "4", "5")
names <- list(
'1'="one",
'2'="two",
'3'="three",
'4'="four",
'5'="five"
)
name_labeller <- function(variable,value){
return(names[value])
}
ggplot(Data[Data$Names %in% facets,], aes(y = y, x = x, group = Names)) +
geom_point(shape = 21, size=3, aes(fill=Part)) +
scale_fill_manual(values=c("gray90","gray40")) +
geom_smooth(method="lm", se= FALSE, size = 1, aes(color = Part, group = Part)) +
scale_color_manual(values=c("black","black")) +
geom_smooth(method = 'lm', size = 1, colour = 'red', se = FALSE)  +
scale_x_log10() +
scale_y_log10() +
theme_bw() +
facet_grid(Names ~ ., scales = "free", labeller=name_labeller) + facet_wrap(~Names,ncol=1)
facet_grid(Names ~ ., scales = "free", labeller=name_labeller) + facet_wrap(~Names,ncol=1)
ggplot(Data[Data$Names %in% facets,], aes(y = y, x = x, group = Names)) +
geom_point(shape = 21, size=3, aes(fill=Part)) +
scale_fill_manual(values=c("gray90","gray40")) +
geom_smooth(method="lm", se= FALSE, size = 1, aes(color = Part, group = Part)) +
scale_color_manual(values=c("black","black")) +
geom_smooth(method = 'lm', size = 1, colour = 'red', se = FALSE)  +
scale_x_log10() +
scale_y_log10() +
theme_bw() +
facet_grid(Names ~ ., scales = "free", labeller=name_labeller) + facet_wrap(~Names,ncol=1)
set.seed(3343)
pValues = rep(NA,100)
for(i in 1:100){
z = rnorm(20)
x = rnorm(20)
y = rnorm(20,mean=0.5*x)
pValues[i] = summary(lm(y ~ x))$coef[2,4]
}
pValues
set.seed(1010093)
pValues <- rep(NA,1000)
for(i in 1:1000){
y <- rnorm(20)
x <- rnorm(20)
pValues[i] <- summary(lm(y ~ x))$coeff[2,4]
}
# Controls false positive rate
sum(pValues < 0.05)
sum(p.adjust(pValues,method="bonferroni") < 0.05)
sum(p.adjust(pValues,method="BH") < 0.05)
set.seed(1010093)
pValues <- rep(NA,1000)
for(i in 1:1000){
x <- rnorm(20)
# First 500 beta=0, last 500 beta=2
if(i <= 500){y <- rnorm(20)}else{ y <- rnorm(20,mean=2*x)}
pValues[i] <- summary(lm(y ~ x))$coeff[2,4]
}
trueStatus <- rep(c("zero","not zero"),each=500)
table(pValues < 0.05, trueStatus)
table(p.adjust(pValues,method="bonferroni") < 0.05,trueStatus)
table(p.adjust(pValues,method="BH") < 0.05,trueStatus)
set.seed(3343)
pValues = rep(NA,100)
for(i in 1:100){
z = rnorm(20)
x = rnorm(20)
y = rnorm(20,mean=0.5*x)
pValues[i] = summary(lm(y ~ x))$coef[2,4]
}
pValues
sum(pValues < 0.1)
sum(p.adjust(pValues,method="bonferroni") < 0.1)
sum(p.adjust(pValues,method="BH") < 0.1)
y = b0 + b1*x + b2*z + e
set.seed(44333)
x <- rnorm(50)
e <- rnorm(50)
b0 <- 1; b1 <- 2
y <- b0 + b1*x + e
lm1 <- lm(y  ~  x)
mean(x)
x
lm1$coeff
y
y [y>0]
y[y>0]
x[y>0]
y>0
y1 <- y[x>0]
x1 <- x[x>0]
lm(y1  ~  x1)$coeff
set.seed(44333)
x <- rnorm(5000)
e <- rnorm(5000)
b0 <- 1; b1 <- 2
y <- b0 + b1*x + e
lm1 <- lm(y  ~  x)
lm1$coeff
y1 <- y[x>0]
x1 <- x[x>0]
lm(y1  ~  x1)$coeff
x
y2 <- y[y>0]
x2 <- x[y>0]
lm(y2  ~  x2)$coeff
lm(y1  ~  x1)$coeff
library(MASS)
rlm1 <- rlm(y  ~  x)
rlm1$coeff
y1 <- y[x>0]
x1 <- x[x>0]
rlm(y1  ~  x1)$coeff
y2 <- y[y>0]
x2 <- x[y>0]
rlm(y2  ~  x2)$coeff
?rlm
?<<
?"<<"
?'<<-'
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
v <- makeVector(1:1000)
v
attributes(v)
v$names
sx = 0.6
nx = 10
# MWT (old) 5, sigma 0.68
sy = 0.68
ny = 10
sp = ( (nx - 1)*sx + (ny -1)*sy ) / (nx + ny -2)
sp
m = 3-5
m
sigma = sp * (1/nx +1/ny)
sigma
qt(0.975, 10+10-2)
sigma2= sp * (1/nx +1/ny)
sigma = sqrt(sigma2)
sigma
c(m -qt(0.025, 10+10-2)* sigma, m -qt(0.975, 10+10-2)* sigma)
c(m -qt(0.025, 10+10-2)* sigma, m +qt(0.975, 10+10-2)* sigma)
c(m +qt(0.025, 10+10-2)* sigma, m +qt(0.975, 10+10-2)* sigma)
sp = ( (nx - 1)*sx + (ny -1)*sy ) / (nx + ny -2)
sp
sigma2= sp * (1/nx +1/ny)
sigma = sqrt(sigma2)
sigma
c(m +qt(0.025, 10+10-2)* sigma, m +qt(0.975, 10+10-2)* sigma)
c(m +qt(0.025, 10+10-2)* sigma, m +qt(0.975, 10+10-2)* sigma)
m
m = 6-4
c(m +qt(0.025, 10+10-2)* sigma, m +qt(0.975, 10+10-2)* sigma)
m = 6-4
c(m +qt(0.025, 10+10-2)* sigma, m +qt(0.975, 10+10-2)* sigma)
c(m +qt(0.025, nx+ny-2)* sigma, m +qt(0.975, nx+ny-2)* sigma)
mx = 4
sdx = 0.5
nx = 100
#
my = 6
sy = 2
ny = 100
sp = ( (nx - 1)*sx + (ny -1)*sy ) / (nx + ny -2)
sp
m = 6-4
m
sigma2= sp * (1/nx +1/ny)
sigma = sqrt(sigma2)
sigma
c(m +qt(0.025, nx+ny-2)* sigma, m +qt(0.975, nx+ny-2)* sigma)
tm <- -3
pm <- 1
mx <- -3
nx <- 9
sp = ( (nx - 1)*sx + (ny -1)*sy ) / (nx + ny -2)
sp
m = mx-my
m
mx <- -3
nx <- 9
sx <- 1.5
# placebo
my <- 1
ny <- 9
sy <- 1.8
sp = ( (nx - 1)*sx + (ny -1)*sy ) / (nx + ny -2)
sp
m = mx-my
m
sigma2= sp * (1/nx +1/ny)
sigma = sqrt(sigma2)
sigma
c(m +qt(0.05, nx+ny-2)* sigma, m +qt(0.95, nx+ny-2)* sigma)
?qt
sp <- sqrt( ((nx - 1) * sx^2 + (ny-1) * sy^2) / (nx + ny - 2))
sp
sigma
c(m +qt(0.05, nx+ny-2)* sp, m +qt(0.95, nx+ny-2)* sp)
sigma = sp * sqrt(1/nx +1/ny)
sigma
c(m +qt(0.05, nx+ny-2)* sp, m +qt(0.95, nx+ny-2)* sp)
mx <- -3
nx <- 9
dsx <- 1.5
sx = sqrt(dsx)
# placebo
my <- 1
ny <- 9
dsy <- 1.8
sy = sqrt(dsy)
sp = ( (nx - 1)*sx + (ny -1)*sy ) / (nx + ny -2)
sp
m = mx-my
m
sigma2= sp * (1/nx +1/ny)
sigma = sqrt(sigma2)
c(m +qt(0.05, nx+ny-2)* sp, m +qt(0.95, nx+ny-2)* sp)
c(m +qt(0.05, nx+ny-2)* sigma, m +qt(0.95, nx+ny-2)* sigma)
mx <- -3
nx <- 9
dsx <- 1.5
sx = (dsx)^2
# placebo
my <- 1
ny <- 9
dsy <- 1.8
sy = (dsy)^2
sp = ( (nx - 1)*sx + (ny -1)*sy ) / (nx + ny -2)
sp
m = mx-my
m
sigma2= sp * (1/nx +1/ny)
sigma = sqrt(sigma2)
sigma
# sp <- sqrt( ((nx - 1) * sx^2 + (ny-1) * sy^2) / (nx + ny - 2))
# sigma = sp * sqrt(1/nx +1/ny)
c(m +qt(0.05, nx+ny-2)* sigma, m +qt(0.95, nx+ny-2)* sigma)
n<-9
sigma = (2 * sqrt(n)) / qt(0.975, 9-1)
sigma
install.packages("shiny")
library(shiny)
library(shiny)
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
setwd("C:\\Users\\massimo\\Documents\\git\\DP_Forecasting\\DP_Forecasting")
runApp()
library(shiny)
runApp()
shinyapps::setAccountInfo(
name="momobo-coursera",
token="B74852C6020FB23E12FFBE1731A11948",
secret="<SECRET>")
shinyapps::setAccountInfo(
name="momobo-coursera",
token="B74852C6020FB23E12FFBE1731A11948",
secret="yCiygdSqM7+iAkVvUZaoBJmW4gmT7cX9m7WJCdx1")
deployApp()
deployApp()
