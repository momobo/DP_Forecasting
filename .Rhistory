plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
# check the slope
lm(y[7:10]~ x[7:10])
plot(x,y)
knots <- c(0)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
xMat
ymat
plot(x,y)
knots <- c(0)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
knots <- c(0)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
xMat
ymat
yMat
plot(x, y,  pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
yMat
lm(y ~ xMat - 1)
plot(x, yhat)
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
points(x, yhat)
lm(y ~ xMat)
lm(yhat[7:10]~ x[7:10])
library(ISLR);
data(Wage);
library(ggplot2);
library(caret);
Wage <- subset(Wage,select=-c(logwage))
# Create a building data set and validation set
inBuild <- createDataPartition(y=Wage$wage,  p=0.7, list=FALSE)
validation <- Wage[-inBuild,]; buildData <- Wage[inBuild,]
inTrain <- createDataPartition(y=buildData$wage, p=0.7, list=FALSE)
training <- buildData[inTrain,]; testing <- buildData[-inTrain,]
dim(training);dim(testing);dim(validation)
mod1 <- train(wage ~.,method="glm",data=training)
mod2 <- train(wage ~.,method="rf", data=training, trControl = trainControl(method="cv"),number=3)
pred1 <- predict(mod1,testing); pred2 <- predict(mod2,testing)
qplot(pred1,pred2,colour=wage,data=testing)
# fit a combined model
predDF <- data.frame(pred1,pred2,wage=testing$wage)
combModFit <- train(wage ~.,method="gam",data=predDF)
combPred <- predict(combModFit,predDF)
# test errors
sqrt(sum((pred1-testing$wage)^2))
sqrt(sum((pred2-testing$wage)^2))
sqrt(sum((combPred-testing$wage)^2))
pred1V <- predict(mod1,validation); pred2V <- predict(mod2,validation)
predVDF <- data.frame(pred1=pred1V,pred2=pred2V)
combPredV <- predict(combModFit,predVDF)
# evaluate on validation
sqrt(sum((pred1V-validation$wage)^2))
sqrt(sum((pred2V-validation$wage)^2))
sqrt(sum((combPredV-validation$wage)^2))
library(ISLR);
version
coplot(mpg ~ as.factor(am) | wt+qsec, data=mtcars, panel=panel.smooth, rows=1)
plot(fit8)
fit8 <- lm(mpg ~ am  + wt + qsec, mtcars)
summary(fit8)$coeff[order(summary(fit8)$coeff[,4], decreasing=T),]
fit8 <- lm(mpg ~ am  + wt + qsec, mtcars)
summary(fit8)$coeff[order(summary(fit8)$coeff[,4], decreasing=T),]
plot(fit8)
plot(fit8)[4]
plot(fit8, which=1:4)
plot(fit8, which=4)
?transform
?aggregate
?rm
?check
package.skeleton()
getwd()
setwd("./anRpackage")
setwd("..")
system("R CMD check anRpackage")
system("R CMD check anRpackage")
?colSums
?lm
?predict
?dgamma
?getS3Method
library(methods)
?getS3Method
?getS3method
getS3method(main)
getS3method("main")
getS3method("mean")
getS3method("mean", "default")
?showMethod
?showClass
?method
?methods
showMethod(show)
showMethods(show)
getMethod("GenTable","topGOdata")
?getMethod
showMethods(show)
getMethod("show", "ANY")
?colSums #--> base    --this
colSums
lm
predict
dgamma
predict
showMethod("predict")
getS3method("predict", "defaul")
getS3method("predict", "default")
showMethod("predict")
showMethods("predict")
showMethods("dgamma")
showMethods("lm")
showMethods("colSums")
methods("predict")
methods("colSums")
methods("lm")
methods("dgamma")
methods("predict")
methods("mean")
shiny::runApp('work/Kaggle/valued_shoppers/shiny')
setwd("C:\\Users\\mmorelli\\Documents\\work\\DP_Forecasting")
setwd("C:\\Users\\mmorelli\\Documents\\work\\Kaggle\\DP_Forecasting")
runApp()
setwd("C:\\Users\\mmorelli\\Documents\\work\\Kaggle\\DP_Forecasting")
setwd("C:\\Users\\mmorelli\\Documents\\work\\Kaggle\\DP_Forecasting")
setwd("C:\\Users\\mmorelli\\Documents\\work\\DP_Forecasting")
setwd("C:\\Users\\mmorelli\\Documents\\work\\DP_Forecasting")
tran <- read.csv("sample_big.csv", header=F)
h <- read.csv("header.csv")
dn <- read.csv("random_dept.csv", sep=";")
tran <- merge(dn, tran)
str(tran)
tran <- read.csv("sample_big.csv", header=F)
h <- read.csv("header.csv")
names(tran) <- names(h)
dn <- read.csv("random_dept.csv", sep=";")
# intersect(names(dn), names(tran))
tran <- merge(dn, tran)
#head(tran)
#unique(tran$deptName)
str(tran)
unique(tran$company)
str(tran)
count(unique(tran$company))
sum(count(unique(tran$company)))
length(unique(tran$company))
str(tran)
length(unique(tran$chain))
setwd(C:\\Users\\mmorelli\\Google Drive\\Data Science)
setwd("C:\\Users\\mmorelli\\Google Drive\\Data Science")
install.packages("sp")
library(sp)
install.packages("RColorBrewer")
library(RColorBrewer)
unempl <- read.delim2(file="./data/data_germany_unemployment_by_county.txt", header = TRUE, sep = "\t",
dec=",", stringsAsFactors=F)
library(sp)
library(RColorBrewer)
con <- url("http://gadm.org/data/rda/DEU_adm1.RData")
print(load(con))
close(con)
col = topo.colors(length(levels(gadm$NAME_1)), alpha = .5)
spplot(gadm, "NAME_1", col.regions=col, main="German Regions", colorkey = FALSE, lwd=.4, col="white")
con <- url("http://gadm.org/data/rda/DEU_adm2.RData")
print(load(con))
close(con)
# plot Germany with random colors
col = topo.colors(length(levels(gadm$NAME_2)), alpha = .5)
spplot(gadm, "NAME_2", col.regions=col, main="German Regions", colorkey = FALSE, lwd=.4, col="white")
gadm
gadm$Name_2
?gadm
str(gadm)
attributes(gadm)
class(gadm)
?SpatialPolygonsDataFrame
gadm$NAME_2
con <- url("http://gadm.org/data/rda/DEU_adm2.RData")
print(load(con))
?write.file
?write
getwd()
write(gadm$NAME_2, file"z.csv", sep",")
write(gadm$NAME_2, file="z.csv", sep",")
write(gadm$NAME_2, file="z.csv", sep=",")
gadm$NAME_2
write(as.character(gadm$NAME_2), file="z.csv", sep=",")
as.character(gadm$NAME_2)
write(as.character(gadm$NAME_2), file="z.csv", sep=",")
as.character(gadm$NAME_1)
con <- url("http://gadm.org/data/rda/DEU_adm1.RData")
print(load(con))
close(con)
# plot Germany with random colors
col = topo.colors(length(levels(gadm$NAME_1)), alpha = .5)
spplot(gadm, "NAME_1", col.regions=col, main="German Regions", colorkey = FALSE, lwd=.4, col="white")
write(as.character(gadm$NAME_1), file="z.csv", sep=",")
as.character(gadm$NAME_1)
write(as.character(gadm$NAME_1), file="z.csv", sep=",")
read.csv("germanpop.csv")
pop <- read.csv("germanpop.csv")
pop$land
pop
pop <- read.csv("germanpop.csv", sep=";")
pop
pop$land
intersect(pop$land, gadm$NAME_1
)
pop
myPalette<-brewer.pal(6,"Purples")
myPalette
?myPalette
par(mfrow=c(2,2))
### Show all the colour schemes available
display.brewer.all()
### Generate random data matrix
rand.data <- replicate(8,rnorm(100,100,sd=1.5))
rand.data <- replicate(8,rnorm(100,100,sd=1.5))
### Draw a box plot, with each box coloured by the 'Set3' palette
boxplot(rand.data,col=brewer.pal(8,"Set3"))
### Draw plot of counts coloured by the 'Set3' pallatte
br.range <- seq(min(rand.data),max(rand.data),length.out=10)
results <- sapply(1:ncol(rand.data),function(x) hist(rand.data[,x],plot=F,br=br.range)$counts)
plot(x=br.range,ylim=range(results),type="n",ylab="Counts")
cols <- brewer.pal(8,"Set3")
lapply(1:ncol(results),function(x) lines(results[,x],col=cols[x],lwd=3))
### Draw a pie chart
table.data <- table(round(rand.data))
cols <- colorRampPalette(brewer.pal(8,"Dark2"))(length(table.data))
pie(table.data,col=cols)
pop
myPalette<-brewer.pal(16,"Purples")
myPalette<-brewer.pal(8,"Purples")
order(pop)
order(pop$population)
pop[order(pop$population),]
pop[rev(order(pop$population)),]
order(pop$population)
library(rgdal)
install.packages("rgdal")
?rgdal
library(rgdal)
library(ggplot2)
library(RColorBrewer)
mrg.df <- data.frame(id=rownames(map@data),ID_1=map@data$ID_1)
mrg.df <- merge(mrg.df,pov, by="ID_1")
map.df <- fortify(map)
ger<-readShapePoly("germany3.shp")
library(rgdal)
library(RColorBrewer)
library(ggplot2)
ger<-readShapePoly("germany3.shp")
library(maptools)
install.packages("maptools")
library(maptools)
ger<-readShapePoly("germany3.shp")
edPov<-read.csv('gerpoverty.csv')
mrg.df <- data.frame(id=rownames(map@data),ID_1=map@data$ID_1)
map <- readOGR(dsn=".", layer="germany3")
mrg.df <- data.frame(id=rownames(map@data),ID_1=map@data$ID_1)
mrg.df <- merge(mrg.df,pov, by="ID_1")
map.df <- fortify(map)
map.df <- merge(map.df,mrg.df, by="id")
ggplot(map.df, aes(x=long, y=lat, group=group)) +
geom_polygon(aes(fill=poverty), color = "grey50", data =subset(map.df, !Id1 %in% c("Berlin", "Bremen")))+
geom_polygon(aes(fill=poverty), color = "grey50", data =subset(map.df, Id1 %in%  c("Berlin", "Bremen")))+
scale_fill_gradientn(colours=brewer.pal(5,"OrRd"))+
labs(x="",y="")+ theme_bw()+
coord_fixed()
library(ggmap)
geocode("the white house")
geocode("germany")
ge <- geocode("germany")
gmaps(ge, zoom=7)
qmap(ge, zoom=7)
?get_map
qmap(ge)
ge <- geocode("germany")
qmap(ge)
qmap(ge, source="osm")
ge
qmap(ge)
qmap(location="germany")
?get_map
qmap(location="germany")
qmap(location="germany", zoom=8)
qmap(location="germany", zoom=7)
qmap(location="germany", zoom=6)
qmap(location="germany", zoom=6, source="osm")
qmap(location="germany", zoom=6, source="osm")
?get_map
qmap(location="germany", zoom=6, source="stamen")
?get_map
qmap(location="germany", zoom=6, source="cloudmade")
qmap(location="germany", zoom=6, source="osm")
ge <- geocode("munich")
qmap(location="munich", zoom=6, source="osm")
getwd()
setwd("germany maps")
url <- "http://biogeo.ucdavis.edu/data/gadm2/shp/DEU_adm.zip"
download.file(url, destfile=shape.zip)
download.file(url, destfile="shape.zip")
download.file(url, destfile="shape.zip", mode=wb)
download.file(url, destfile="shape.zip", mode="wb")
unzip("shape.zip")
shapefile <- readShapeSpatial("DEU_adm1.shp")
shapefile <- readShapeSpatial("DEU_adm1.shp", proj4tostring = CRS("+proj=longlat +datum=WGS84"))
shapefile <- readShapeSpatial("DEU_adm1.shp", proj4string = CRS("+proj=longlat +datum=WGS84"))
qmaps("germany", zoom =7, maptype="terrain")
qmap("germany", zoom =7, maptype="terrain")
qmap("germany", zoom =6, maptype="terrain")
qmap("germany", zoom =6, maptype="terrain") + geom_polygon(aes(x=long, y=lat, group=group), data=data,
colour = "white", fill='black', alpha=.4, size=.3)
qmap("germany", zoom =6, maptype="satellite") + geom_polygon(aes(x=long, y=lat, group=group), data=data,
colour = "white", fill='black', alpha=.4, size=.3)
library(maptools)
library(gpclib)
install.packages("gpclib")
library(gpclib)
library(sp)
install.packages("gpclib", type="source")
library(gpclib)
library(sp)
gpclibPermit()
qmap("germany", zoom =6, maptype="satellite") + geom_polygon(aes(x=long, y=lat, group=group), data=data,
colour = "white", fill='black', alpha=.4, size=.3)
?cut
intersect(pop$land, gadm$NAME_1)
pop[rev(order(pop$population)),]
myPalette<-brewer.pal(6,"Purples")
pop[rev(order(pop$population)),]
cut(pop$population,6)
pop$poporder <- cut(pop$population,6)
spplot(gadm, "poporder", col=grey(.9), col.regions=myPalette,
main="population in germany")
pop
col_no <- as.factor(as.numeric(cut(pop$population[order],
c(500000, 1000000, 2000000, 4000000, 8000000, 16000000))))
pop
order(pop$population)
col_no <- as.factor(as.numeric(cut(pop$population[order($population)],
c(500000, 1000000, 2000000, 4000000, 8000000, 16000000))))
col_no <- as.factor(as.numeric(cut(pop$population[order($population))],
col_no <- as.factor(as.numeric(cut(pop$population[order($population)]),
c(500000, 1000000, 2000000, 4000000, 8000000, 16000000)))
col_no <- as.factor(as.numeric(cut(pop$population[order(pop$population)]),
c(500000, 1000000, 2000000, 4000000, 8000000, 16000000)))
col_no <- as.factor(as.numeric(cut(pop$population[order(pop$population)]),
c(500000, 1000000, 2000000, 4000000, 8000000, 16000000))
)
col_no <- as.factor(as.numeric(cut(pop$population[order(pop$population)],
c(500000, 1000000, 2000000, 4000000, 8000000, 16000000))))
levels(col_no) <- c(">0.5M", "0,5-1M", "1-2M",
"2-4M", "4-8M", "8-16M", "<16M")
col_no
gadm$col_no <- col_no
spplot(gadm, "poporder", col=grey(.9), col.regions=myPalette,
main="population in germany")
spplot(gadm, "col_no", col=grey(.9), col.regions=myPalette,
main="population in germany")
myPalette<-brewer.pal(7,"Purples")
spplot(gadm, "col_no", col=grey(.9), col.regions=myPalette,
main="population in germany")
gadm$col_no
gadm$col_no
as.data.frame(gadm)
head(as.data.frame(gadm))
col_no <- as.factor(as.numeric(cut(gadm$population[order(pop$population)],
c(500000, 1000000, 2000000, 4000000, 8000000, 16000000))))
?gadm
?spplot
spplot(gadm, zcol="col_no", col=grey(.9), col.regions=myPalette,
main="population in germany")
col_no
pop$population
cut(pop$population, c(500000, 1000000, 2000000, 4000000, 8000000, 16000000))
levels(col_no) <- c(">0.5M", "0,5-1M", "1-2M", "2-4M", "4-8M", "8-16M", "<16M")
col_no <- cut(pop$population, c(500000, 1000000, 2000000, 4000000, 8000000, 16000000))
levels(col_no) <- c(">0.5M", "0,5-1M", "1-2M", "2-4M", "4-8M", "8-16M", "<16M")
str(col_no)
col_no
pop$population
col_no <- cut(pop$population, c(500000, 1000000, 2000000, 4000000, 8000000, 16000000, 32000000))
levels(col_no) <- c(">0.5M", "0,5-1M", "1-2M", "2-4M", "4-8M", "8-16M", "<16M")
str(col_no)
col_no
gadm$NAME_1
merge(gadm$NAME_1, pop)
pop$NAME_1 <- pop$population
merge(gadm$NAME_1, pop)
pop <- read.csv("germanpop.csv", sep=";")
intersect(pop$land, gadm$NAME_1)
class(gadm$NAME_1)
library(plyr)
?join
pop
aa <- join(gadm$NAME_1, pop, by = "land")
aa <- join(as.data.frame(gadm$NAME_1), pop, by = "land")
pop$NAME_1 <- pop$land
aa <- join(as.data.frame(gadm$NAME_1), pop, by = "NAME_1")
as.data.frame(gadm$NAME_1)
pop
as.data.frame(gadm$NAME_1, "land")
?as.data.frame
as.data.frame(gadm$NAME_1, row_names= "land")
as.data.frame(gadm$NAME_1, row_names= c("land")
)
ga <- as.data.frame(gadm$NAME_1)
ga
ga$NAME_1
ga <- as.data.frame(gadm$NAME_1, names=c("land"))
ga
names(ga) <- c("land")
ga
merge(ga, pop)
merge(ga, pop)$population
col_no <- cut(merge(ga, pop)$population, c(500000, 1000000, 2000000, 4000000, 8000000, 16000000, 32000000))
spplot(gadm, zcol="col_no", col=grey(.9), col.regions=myPalette, main="population in germany")
gadm$col_no <- col_no
spplot(gadm, zcol="col_no", col=grey(.9), col.regions=myPalette, main="population in germany")
myPalette<-brewer.pal(6,"Purples")
spplot(gadm, zcol="col_no", col=grey(.9), col.regions=myPalette, main="population in germany")
pop
library(sp)
library(RColorBrewer)
con <- url("http://gadm.org/data/rda/DEU_adm1.RData")
print(load(con))
close(con)
pop <- read.csv("germanpop.csv", sep=";")
myPalette<-brewer.pal(6,"Purples")
ga <- as.data.frame(gadm$NAME_1)
names(ga) <- c("land")
col_no <- cut(merge(ga, pop)$population, c(500000, 1000000, 2000000, 4000000, 8000000, 16000000, 32000000))
levels(col_no) <- c(">0.5M", "0,5-1M", "1-2M", "2-4M", "4-8M", "8-16M", "<16M")
gadm$col_no <- col_no
spplot(gadm, zcol="col_no", col=grey(.9), col.regions=myPalette, main="population in germany")
myPalette<-brewer.pal(7,"Purples")
spplot(gadm, zcol="col_no", col=grey(.9), col.regions=myPalette, main="population in germany")
q <- as.data.frame(gadm$NAME_1, names="aa")
q
q <- as.data.frame(gadm$NAME_1, col.names=c("aa"))
q
?data.frame
q <- data.frame(gadm$NAME_1, names=c("aa"))
q
q <- data.frame(land=gadm$NAME_1)
q
col_no <- cut(merge(data.frame(land=gadm$NAME_1), pop)$population,
c(500000, 1000000, 2000000, 4000000, 8000000, 16000000, 32000000))
levels(col_no) <- c(">0.5M", "0,5-1M", "1-2M", "2-4M", "4-8M", "8-16M", "<16M")
gadm$col_no <- col_no
spplot(gadm, zcol="col_no", col=grey(.9), col.regions=myPalette, main="population in germany")
shiny::runApp('~/work/DP_Forecasting')
tran <- read.csv("sample_big.csv", header=F)
getwd()
setwd("C:\\Users\\mmorelli\\Documents\\work\\DP_Forecasting")
tran <- read.csv("sample_big.csv", header=F)
h <- read.csv("header.csv")
names(tran) <- names(h)
dn <- read.csv("random_dept.csv", sep=";")
# intersect(names(dn), names(tran))
tran <- merge(dn, tran)
str(tran)
length(unique(tran$chain))
tran$chain
tran$chain%16
tran$chain mod 16
tran$chain %% 16
pop <- read.csv("germanpop.csv", sep=";")
tran$chain %% 16
tran$landID <- tran$chain %% 16
pop
unique(tran$landID)
tran$landID <- tran$chain %% 16 +1
unique(tran$landID)
tran$code <- tran$chain %% 16 +1
unique(tran$code)
tran$code <- (tran$chain %% 16) +1
unique(tran$code)
merge(train, pop)
merge(tran, pop)
tran <- merge(tran, pop)
head(tran)
shiny::runApp()
filtland <- ddply(tran, "land" ,function(df){sum(df$purchaseamount)})
names(filtland)[2] <- "landVal"
col_no <- cut(merge(data.frame(land=gadm$NAME_1), filtland)$landVal)
merge(data.frame(land=gadm$NAME_1))
merge(data.frame(land=gadm$NAME_1), filtland)
merge(data.frame(land=gadm$NAME_1), filtland)$landVal
cut(merge(data.frame(land=gadm$NAME_1), filtland)$landVal)
cut(merge(data.frame(land=gadm$NAME_1), filtland)$landVal, break= 4)
cut(merge(data.frame(land=gadm$NAME_1), filtland)$landVal)
?cut
cut(merge(data.frame(land=gadm$NAME_1), filtland)$landVal, breaks=7)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
