yy$MeanDecreaseGini
yy[1]
yy[,1]
sort(yy[,1])
varImp(modfit)
str(modfit)
getTree(modfit$finalModel, k=2)
set.seed(33833)
rf <- randomForest(y ~ ., data=vowel.train)
yy <- importance(rf)
yy <- varImp(rf)
yy
sort(yy[,1])
yy
sort(yy[,1])
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
formula <- chd ~ age + alcohol + obesity + tobacco + typea + ldl
set.seed(13234)
glmSA <- glm(formula, family="binomial", data =SAheart)
summary(glmSA)
trainPred <- predict(glmSA, trainSA)
testPred  <- predict(glmSA, testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, trainPred)
missClass(testSA$chd,  testPred)
set.seed(13234)
glmSA <- glm(formula, family="binomial", data =trainSA)
summary(glmSA)
trainPred <- predict(glmSA, trainSA)
testPred  <- predict(glmSA, testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, trainPred)
missClass(testSA$chd,  testPred)
set.seed(13234)
glmSA <- glm(formula, family="binomial", data =trainSA)
summary(glmSA)
trainPred <- predict(glmSA, trainSA)
testPred  <- predict(glmSA, testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, trainPred)
missClass(testSA$chd,  testPred)
set.seed(13234)
glmSA <- train(formula, method="glm", family="binomial", data =trainSA)
trainPred <- predict(glmSA, trainSA)
testPred  <- predict(glmSA, testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, trainPred)
missClass(testSA$chd,  testPred)
set.seed(33833)
rf <- randomForest(y ~ ., data=vowel.train)
yy <- varImp(rf)
rf <- randomForest(y ~ ., data=vowel.train)
yy <- varImp(rf)
library(caret)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
str(vowel.test)
# Set the variable y to be a factor variable in both the training and test set.
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y  <- as.factor(vowel.test$y)
# Then set the seed to 33833.
set.seed(33833)
rf <- randomForest(y ~ ., data=vowel.train)
yy <- varImp(rf)
str(yy)
yy
library(lubridate)
?year
p <- rpois(1000, 0,5)
p <- rpois(1000, 0.5)
var(p)
(1/6) * (1-1/6)
sqrt((1/6) * (1-1/6))
sqrt((3.5) * (1-3.5))
sqrt((0.5) * (1-0.5))
((1/6) * (1-1/6))
sqrt((1/6) * (1-1/6))
35/12
sqrt(35/12)
x <- rpois(10000, 0.6)
var(x)
x
x <- binom(10000, 0.6)
x <- rbin(10000, 0.6)
?rpois
x <- rbinom(10000, 0.6)
?binom
?rbinom
x <- rbinom(10000, 6, 0.6)
var(x)
sqrt(35/12)
sqrt((1/6) * (1-1/6))
x
head(mtcars)
library(ggplot2)
?mtcars
qplot(wt, mpg, col=as.factor(cyl), size=2, data=mtcars)
fit <- lm(mpg ~ am + ., mtcars)
summary(fit)
?anova
anova(fit)
confint(fit)
plot(mtcars$wt, fit$residuals)
plot(mtcars$cyl, fit$residuals)
plot(mtcars$am, fit$residuals)
plot(mtcars$disp, fit$residuals)
plot(mtcars$hp, fit$residuals)
plot(mtcars$qsec, fit$residuals)
plot(mtcars$vs, fit$residuals)
plot(mtcars$gear, fit$residuals)
plot(mtcars$carb, fit$residuals)
plot(fit$fitted.values, fit$residuals, main="Residuals vs. Fitted",
xlab="Fitted values",  ylab="Residuals",pch =19)
abline(h=0)
add1(lm(mpg ~ 1, mtcars), mpg ~ am + cyl + disp + hp + drat + wt + qsec + vs + gear + carb, test="F")
require(graphics)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ disp | as.factor(cyl), data = mtcars, panel = panel.smooth, rows = 1)
fit2 <- lm(mpg ~ wt + cyl + hp + am + qsec + disp, mtcars)
anova(fit2)
coefficients(fit)
coefficients(fit2)
confint(fit)
confint(fit2)
install.packages("MASS")
library(MASS)
?shuttle
head(shuttle)
head(shuttle)
shuttle$outcome <- (shuttle$use == "auto") *1
head(shuttle)
shuttle
fit <- glm(outcome ~., family=binomial)
fit <- glm(outcome ~., family=binomial, data=shuttle)
fit <- glm(outcome ~., family="binomial", data=shuttle)
str(shuttle)
shuttle[, 7]
shuttle[, -7]
shu <- shuttle[, -7]
fit <- glm(outcome ~., family="binomial", data=shu)
shu
fit <- glm(outcome ~ wind, family="binomial", data=shu)
summary(fit)
coef(fit)
plot(outcome, wind, data=shu)
plot(shu$outcome, shu$wind)
coef(fit)
exp(coef(fit))
exp(confint(fit))
fit$coef
1/exp(coef(fit))
1/exp(coef(fit))
exp(coef(fit))
library(MASS)
shuttle$outcome <- (shuttle$use == "auto") *1
str(shuttle)
shu <- shuttle[, -7]
fit <- glm(outcome ~ wind + magn, family="binomial", data=shu)
coef(fit)
exp(coef(fit))
fit <- glm(outcome ~ wind + magn, family="binomial", data=shu)
coef(fit)
exp(coef(fit))
shuttle
coef(fit)
fit <- glm(outcome ~ wind, family="binomial", data=shu)
coef(fit)
exp(coef(fit))
fit <- glm(outcome ~ wind + magn, family="binomial", data=shu)
coef(fit)
exp(coef(fit))
1/exp(coef(fit))
fit1 <- glm(outcome ~ wind, family="binomial", data=shu)
coef(fit1)
1/exp(coef(fit1))
fit2 <- glm(outcome ~ wind + magn, family="binomial", data=shu)
coef(fit2)
1/exp(coef(fit2))
1/coef(fit2)
library(MASS)
shuttle$outcome <- (shuttle$use == "auto") *1
shu <- shuttle[, -7]
fit2 <- glm(outcome ~ wind + magn, family="binomial", data=shu)
coef(fit2)
shuttle$outcome <- (shuttle$use == "auto") *1
shuttle$reversed <- 1-shuttle$outcome
shu <- shuttle[, -7]
shuttle
fit3 <- glm(reversed ~ wind, family="binomial", data=shu)
fit3 <- glm(outcome ~ wind, family="binomial", data=shu)
coef(fit3)
fit4 <- glm(reversed ~ wind, family="binomial", data=shu)
coef(fit3)
coef(fit4)
insectSprays
InsectSprays
str(InsectSprays)
fitq4 <- glm(count~spray, family="poisson")
fitq4 <- glm(count~spray, family="poisson", data=InsectSprays)
coef(fitq4)
1/exp(coef(fitq4))
source('~/.active-rstudio-document', echo=TRUE)
?offset
fitq5 <- glm(count~spray+offset(10), family="poisson", data=InsectSprays)
dim(InsectSprays)
t <- 1:72
fitq5 <- glm(count~spray+offset(t), family="poisson", data=InsectSprays)
t <- log(1:72)
fitq5 <- glm(count~spray+offset(t), family="poisson", data=InsectSprays)
coef(fitq5)
fitq5b <- glm(count~spray+offset(t+log(10)), family="poisson", data=InsectSprays)
coef(fitq5b)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
n <- 500;
x <- seq(0, 4 * pi, length = n);
y <- sin(x) + rnorm(n, sd = .3)
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
knots <- seq(0, 8 * pi, length = 20);
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
lines(x, yhat, col = "red", lwd = 2)
class(splineTerms)
head(splineTerms)
dime(splineTerms)
dim(splineTerms)
knots
plot(x,y)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
knots <- c(-5,0,5)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
yhat
lm(y ~ xMat - 1)
?lines
x
yhat
x[6:10]
lm(y[6:10], x[6:10])
lm(y[6:10]~ x[6:10])
lm(y[7:10]~ x[7:10])
plot(x,y)
knots <- c(0,5)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
# check the slope
lm(y[7:10]~ x[7:10])
plot(x,y)
knots <- c(0)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
xMat
ymat
plot(x,y)
knots <- c(0)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
knots <- c(0)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
xMat
ymat
yMat
plot(x, y,  pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
yMat
lm(y ~ xMat - 1)
plot(x, yhat)
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
points(x, yhat)
lm(y ~ xMat)
lm(yhat[7:10]~ x[7:10])
library(ISLR);
data(Wage);
library(ggplot2);
library(caret);
Wage <- subset(Wage,select=-c(logwage))
# Create a building data set and validation set
inBuild <- createDataPartition(y=Wage$wage,  p=0.7, list=FALSE)
validation <- Wage[-inBuild,]; buildData <- Wage[inBuild,]
inTrain <- createDataPartition(y=buildData$wage, p=0.7, list=FALSE)
training <- buildData[inTrain,]; testing <- buildData[-inTrain,]
dim(training);dim(testing);dim(validation)
mod1 <- train(wage ~.,method="glm",data=training)
mod2 <- train(wage ~.,method="rf", data=training, trControl = trainControl(method="cv"),number=3)
pred1 <- predict(mod1,testing); pred2 <- predict(mod2,testing)
qplot(pred1,pred2,colour=wage,data=testing)
# fit a combined model
predDF <- data.frame(pred1,pred2,wage=testing$wage)
combModFit <- train(wage ~.,method="gam",data=predDF)
combPred <- predict(combModFit,predDF)
# test errors
sqrt(sum((pred1-testing$wage)^2))
sqrt(sum((pred2-testing$wage)^2))
sqrt(sum((combPred-testing$wage)^2))
pred1V <- predict(mod1,validation); pred2V <- predict(mod2,validation)
predVDF <- data.frame(pred1=pred1V,pred2=pred2V)
combPredV <- predict(combModFit,predVDF)
# evaluate on validation
sqrt(sum((pred1V-validation$wage)^2))
sqrt(sum((pred2V-validation$wage)^2))
sqrt(sum((combPredV-validation$wage)^2))
library(ISLR);
version
coplot(mpg ~ as.factor(am) | wt+qsec, data=mtcars, panel=panel.smooth, rows=1)
plot(fit8)
fit8 <- lm(mpg ~ am  + wt + qsec, mtcars)
summary(fit8)$coeff[order(summary(fit8)$coeff[,4], decreasing=T),]
fit8 <- lm(mpg ~ am  + wt + qsec, mtcars)
summary(fit8)$coeff[order(summary(fit8)$coeff[,4], decreasing=T),]
plot(fit8)
plot(fit8)[4]
plot(fit8, which=1:4)
plot(fit8, which=4)
?transform
?aggregate
?rm
?check
package.skeleton()
getwd()
setwd("./anRpackage")
setwd("..")
system("R CMD check anRpackage")
system("R CMD check anRpackage")
?colSums
?lm
?predict
?dgamma
?getS3Method
library(methods)
?getS3Method
?getS3method
getS3method(main)
getS3method("main")
getS3method("mean")
getS3method("mean", "default")
?showMethod
?showClass
?method
?methods
showMethod(show)
showMethods(show)
getMethod("GenTable","topGOdata")
?getMethod
showMethods(show)
getMethod("show", "ANY")
?colSums #--> base    --this
colSums
lm
predict
dgamma
predict
showMethod("predict")
getS3method("predict", "defaul")
getS3method("predict", "default")
showMethod("predict")
showMethods("predict")
showMethods("dgamma")
showMethods("lm")
showMethods("colSums")
methods("predict")
methods("colSums")
methods("lm")
methods("dgamma")
methods("predict")
methods("mean")
setwd("C:\\Users\\mmorelli\\Documents\\work\\Kaggle\\valued_shoppers")
# perl -ne 'print if (rand() < .01)' biglist.txt > subset.txt
h <- read.csv("header.csv")
names(h)
tran <- read.csv("sample_big.csv", header=F)
names(tran) <- names(h)
tran$dateTran <- as.Date(as.character(tran$date),format="%Y-%m-%d")
library(plyr)
library(ggplot2)
acqXdate <- ddply(tran, "dateTran" ,function(df){sum(df$purchaseamount)})
names(acqXdate)[2] <- "ValXDate"
ggplot(acqXdate, aes(x=dateTran, y=ValXDate))+geom_line()
ggplot(acqXdate, aes(x=dateTran, y=ValXDate))+geom_line()+geom_smooth()
?geom_smooth
ggplot(acqXdate, aes(x=dateTran, y=ValXDate))+geom_line()+geom_smooth(n=5)
ggplot(acqXdate, aes(x=dateTran, y=ValXDate))+geom_line()+geom_smooth(n=4)
ggplot(acqXdate, aes(x=dateTran, y=ValXDate))+geom_line()+geom_smooth(n=10)
ggplot(acqXdate, aes(x=dateTran, y=ValXDate))+geom_line()+geom_smooth(n=100)
ggplot(acqXdate, aes(x=dateTran, y=ValXDate))+geom_line()+geom_smooth(method="loess")
ggplot(acqXdate, aes(x=dateTran, y=ValXDate))+geom_line()+geom_smooth(n=300)
ggplot(acqXdate, aes(x=dateTran, y=ValXDate))+geom_line()+geom_smooth(n=200)
ggplot(acqXdate, aes(x=dateTran, y=ValXDate))+geom_line()+geom_smooth(n=800)
ggplot(acqXdate, aes(x=dateTran, y=ValXDate))+geom_line()+geom_smooth()
library(shiny)
getwd()
runApp("shiny")
runApp("shiny")
runApp("shiny")
runApp("shiny")
runApp("shiny")
runApp("shiny")
runApp("shiny")
runApp("shiny")
runApp("shiny")
runApp("shiny")
runApp("shiny")
?reactive
library(shiny)
runApp("shiny")
runApp("shiny")
runApp("shiny")
?output
runApp("test")
runApp("shiny")
runApp("shiny")
runApp("shiny")
runGitHub("leaflet-shiny", "jcheng5")
runGitHub("leaflet-shiny", "jcheng5")
runGitHub('leaflet-shiny', "jcheng5")
?runGitHub
runGitHub("DDP_Project", "momobo")
runGitHub("shiny_example", "rstudio")
runApp("C:\\Users\\mmorelli\\Documents\\work\\leaflet-shiny")
setwd("C:\\Users\\mmorelli\\Documents\\work\\leaflet-shiny")
runApp()
runApp("inst\\examples\\choropleth")
install.packages("leaflet")
install_github('leaflet-shiny', 'jcheng5')
require(devtools)
install_github('leaflet-shiny', 'jcheng5')
runApp("inst\\examples\\choropleth")
setwd("C:\\Users\\mmorelli\\Documents\\work\\leaflet-shiny")
runApp("shiny")
setwd("C:\\Users\\mmorelli\\Documents\\work\\Kaggle\\valued_shoppers")
runApp("shiny")
runApp("shiny")
library(shiny)
runApp("shiny")
runApp("shiny")
runApp("shiny")
runApp("shiny")
runApp("shiny")
runApp("shiny")
runApp("shiny")
runApp("shiny")
shiny::runApp('shiny')
runApp("shiny")
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
sort(unique(tran$dept)
sort(unique(tran$dept))
unique(tran$dept)
sort(unique(tran$dept))
dn <- read.csv("random_dept.csv")
setwd("C:\\Users\\mmorelli\\Documents\\work\\Kaggle\\valued_shoppers\\shiny")
dn <- read.csv("random_dept.csv")
dn
dn <- read.csv("random_dept.csv", sep=";")
dn
intersect(names(dn), names(tran))
?merge
tran <- merge(dn, tran)
shiny::runApp()
unique(tran$deptName)
shiny::runApp()
shiny::runApp()
setwd("C:\\Users\\mmorelli\\Documents\\work\\Kaggle\\valued_shoppers\\shiny")
tran <- read.csv("sample_big.csv", header=F)
unique(tran$deptName)
dn <- read.csv("random_dept.csv", sep=";")
intersect(names(dn), names(tran))
dn <- read.csv("random_dept.csv", sep=";")
intersect(names(dn), names(tran))
names(tran)
h <- read.csv("header.csv")
names(tran) <- names(h)
names(tran)
intersect(names(dn), names(tran))
tran <- merge(dn, tran)
head(tran)
unique(tran$deptName)
shiny::runApp()
shiny::runApp()
dn
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
